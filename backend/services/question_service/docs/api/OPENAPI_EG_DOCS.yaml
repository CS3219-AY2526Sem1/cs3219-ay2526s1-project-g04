openapi: 3.0.3
info:
  title: Question Service API (PeerPrep)
  version: 0.1.3
  description: |
    Microservice to manage and serve coding interview questions.
    - Read APIs for users/services
    - Selection API (idempotent by matching_id)
    - Admin CRUD + publish/versioning
    - Markdown sanitized on read; images via signed URLs

servers:
  - url: http://localhost:3000
    description: Local dev
  - url: https://api.example.com/question-service
    description: Production (placeholder)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Difficulty:
      name: difficulty
      in: query
      description: Optional difficulty filter
      schema:
        $ref: '#/components/schemas/Difficulty'
    Highlight:
      name: highlight
      in: query
      description: Include short snippet highlighting matches
      schema:
        type: boolean
        default: false
    Page:
      name: page
      in: query
      description: 1-based page number
      schema:
        type: integer
        minimum: 1
        default: 1
    Q:
      name: q
      in: query
      description: Full-text search (title/body)
      schema:
        type: string
    Size:
      name: size
      in: query
      description: Page size (max 50)
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
    Topics:
      name: topics
      in: query
      description: 'Comma-separated topic slugs (e.g., `graphs,dp`)'
      schema:
        type: string

  schemas:
    Attachment:
      type: object
      properties:
        object_key:
          type: string
          example: q/two-sum/diagram.png
        mime:
          type: string
          example: image/png
        byte_size:
          type: integer
          minimum: 0
        width:
          type: integer
          minimum: 1
          nullable: true
        height:
          type: integer
          minimum: 1
          nullable: true
        alt:
          type: string
          nullable: true
      required: [object_key, mime]

    Difficulty:
      type: string
      enum: [Easy, Medium, Hard]

    Error:
      type: object
      properties:
        error:
          type: string
          example: not_found
        message:
          type: string
          example: Question not found
        details:
          type: object
          additionalProperties: true
          nullable: true
      required: [error, message]

    QuestionBase:
      type: object
      properties:
        id:
          type: string
          example: two-sum
        title:
          type: string
        body_md:
          type: string
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        topics:
          type: array
          description: Topic tags for this question (with color metadata)
          items:
            $ref: '#/components/schemas/TopicTag'
          example:
            - slug: arrays
              color_hex: '#3B82F6'
            - slug: hash-map
              color_hex: '#10B981'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        status:
          $ref: '#/components/schemas/Status'
        version:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, title, body_md, difficulty, status, version]

    QuestionCreate:
      type: object
      properties:
        id:
          type: string
          description: Stable slug/identifier
        title:
          type: string
        body_md:
          type: string
          description: |
            Markdown body. Image links may reference internal object keys (preferred) using
            `pp://<object_key>` or the alias `/attachments/<object_key>`. The service will adopt any
            staging keys and rewrite links to signed/CDN URLs in body_html on read.
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        topics:
          type: array
          description: Topic slugs (no color metadata in write models)
          items:
            type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
      required: [title, body_md, difficulty]

    QuestionListResponse:
      type: object
      properties:
        page:
          type: integer
        page_size:
          type: integer
        total:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/QuestionSummary'
      required: [page, page_size, total, items]

    QuestionRead:
      allOf:
        - $ref: '#/components/schemas/QuestionBase'
        - type: object
          properties:
            body_html:
              type: string
              description: Sanitized HTML derived from body_md

    QuestionSummary:
      allOf:
        - $ref: '#/components/schemas/QuestionBase'
        - type: object
          properties:
            body_md:
              description: Omitted or truncated in list responses
              type: string
              nullable: true
            snippet:
              type: string
              description: Present when `highlight=true` and `q` provided
              nullable: true

    QuestionUpdate:
      type: object
      description: Partial update (any provided fields will be updated)
      properties:
        title:
          type: string
        body_md:
          type: string
          description: |
            Markdown body. Image links may reference internal object keys (preferred) using
            `pp://<object_key>` or the alias `/attachments/<object_key>`. The service will adopt any
            staging keys and rewrite links to signed/CDN URLs in body_html on read.
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        topics:
          type: array
          description: Topic slugs (no color metadata in write models)
          items:
            type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        status:
          $ref: '#/components/schemas/Status'

    SelectionRequest:
      type: object
      properties:
        matching_id:
          type: string
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        topics:
          type: array
          description: Topic slugs to filter by
          items:
            type: string
        recent_ids:
          type: array
          items:
            type: string
        seed:
          type: number
          description: Deterministic selection seed (testing)
      required: [matching_id]

    SignUploadRequest:
      type: object
      additionalProperties: false
      properties:
        content_type:
          type: string
          description: MIME type of the file to upload (must match PUT)
          example: image/png
        filename:
          type: string
          description: Original filename from client (sanitized server-side)
          example: diagram.png
        suggested_prefix:
          type: string
          nullable: true
          description: Optional key prefix, e.g. 'questions/{id}' for existing questions; defaults to 'staging/{userId}/sessionUlid'
          example: questions/two-sum
      required: [content_type, filename]

    SignUploadResponse:
      type: object
      additionalProperties: false
      properties:
        object_key:
          type: string
          description: Stable storage key to reference in Markdown (pp:// alias)
          example: staging/u123/01J9K3H0X2/20251010/a1b2c3-diagram.png
        upload_url:
          type: string
          description: Short-lived presigned PUT URL for direct upload to S3
          example: https://s3.ap-southeast-1.amazonaws.com/bucket/...signature...
        expires_at:
          type: string
          format: date-time
          description: Expiration time for the upload_url
        max_bytes:
          type: integer
          minimum: 1
          description: Maximum allowed object size in bytes
      required: [object_key, upload_url, expires_at]

    SignViewResponse:
      type: object
      additionalProperties: false
      properties:
        object_key:
          type: string
          example: questions/two-sum/20251010/a1b2c3-diagram.png
        view_url:
          type: string
          description: Short-lived presigned GET (or CDN-signed) URL suitable for previews
          example: https://dxxx.cloudfront.net/...signed...
        expires_at:
          type: string
          format: date-time
      required: [object_key, view_url, expires_at]

    Status:
      type: string
      enum: [draft, published, archived]

    TopicListResponse:
      type: object
      properties:
        total:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/TopicTag'

    TopicTag:
      type: object
      description: Topic tag metadata used in read models.
      additionalProperties: false
      properties:
        slug:
          type: string
          description: Topic identifier (kebab-case)
          example: arrays
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
        color_hex:
          type: string
          description: Hex color for frontend rendering
          example: '#3B82F6'
          pattern: '^#(?:[0-9a-fA-F]{6}|[0-9a-fA-F]{3})$'
      required: [slug, color_hex]

    TopicCreate:
      type: object
      properties:
        display:
          type: string
          description: Topic name to be displayed
          example: Arrays
        color_hex:
          type: string
          description: Hex color for frontend rendering
          example: '#3B82F6'
          pattern: '^#(?:[0-9a-fA-F]{6}|[0-9a-fA-F]{3})$'
      required: [display, color_hex]

security:
  - bearerAuth: []

tags:
  - name: Admin
  - name: Health
  - name: Read
  - name: Selection

paths:
  /admin/attachments/sign-upload:
    post:
      tags: [Admin]
      summary: Get a presigned URL to upload a file directly to object storage
      description: |
        Returns a short-lived presigned **PUT** URL and an `object_key` that can be referenced in Markdown
        as `pp://<object_key>` or `/attachments/<object_key>`. Buckets remain private; do not embed the
        presigned URL in Markdown.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUploadRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUploadResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
      x-roles: [admin]

  /admin/attachments/sign-view:
    get:
      tags: [Admin]
      summary: Get a short-lived view URL for an existing object key (editor preview)
      parameters:
        - name: object_key
          in: query
          required: true
          schema:
            type: string
          description: Storage key previously returned from sign-upload or stored on the question
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignViewResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
      x-roles: [admin]

  /admin/questions:
    get:
      tags: [Admin]
      summary: List questions (any status) for admin
      description: Admin view with filters by status/difficulty/topics.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Difficulty'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/Status'
        - $ref: '#/components/parameters/Topics'
        - $ref: '#/components/parameters/Q'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
      x-roles: [admin]

    post:
      tags: [Admin]
      summary: Create a question (draft)
      description: |
        Creates a draft question.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreate'
      responses:
        '201':
          description: Created (draft)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionRead'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
      x-roles: [admin]

  /admin/questions/{id}:
    get:
      tags: [Admin]
      summary: Get a question by ID (draft / published / archived)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionRead'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags: [Admin]
      summary: Update a question (partial)
      description: |
        Partial update. If body_md contains 'pp://' or '/attachments' links to staging keys, the service will adopt them and update attachments accordingly.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionRead'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
      x-roles: [admin]

    delete:
      tags: [Admin]
      summary: Archive a question (soft delete)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Archived
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
      x-roles: [admin]

  /admin/questions/{id}/publish:
    post:
      tags: [Admin]
      summary: Publish the current head as a new version
      description: >
        Copies current fields, topics, and attachments into `question_versions`,
        increments head `version`, sets status to `published`, and emits an event.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Published
          content:
            application/json:
              schema:
                type: object
                properties:
                  question:
                    $ref: '#/components/schemas/QuestionRead'
                  published_version:
                    type: integer
                    example: 3
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Invalid state (e.g., archived)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
      x-roles: [admin]

  /admin/topics:
    post:
      tags: [Admin]
      summary: Create a new topic tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicTag'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
      x-roles: [admin]

  /healthz:
    get:
      tags: [Health]
      summary: Liveness probe
      security: []
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true

  /questions:
    get:
      tags: [Read]
      summary: List and filter published questions
      description: |
        Returns a paginated list of **published** questions.
        Optional filters: difficulty, topics, full-text `q`.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Difficulty'
        - $ref: '#/components/parameters/Topics'
        - $ref: '#/components/parameters/Q'
        - $ref: '#/components/parameters/Highlight'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /questions/{id}:
    get:
      tags: [Read]
      summary: Get a published question by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionRead'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /questions/topics:
    get:
      tags: [Read]
      parameters:
        - name: difficulty
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /readyz:
    get:
      tags: [Health]
      summary: Readiness probe (DB reachable)
      security: []
      responses:
        '200':
          description: Ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                    example: true
                  checks:
                    type: object
                    properties:
                      db:
                        type: boolean
                        example: true
                      amqp:
                        type: boolean
                        example: true

  /select:
    post:
      tags: [Selection]
      summary: Select one eligible question for a session (idempotent)
      description: |
        Returns one **matching, published** question. Idempotent for the same `matching_id` for 10 minutes.
        Requires role `service` (or `admin`).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectionRequest'
            examples:
              basic:
                value:
                  matching_id: 'sess-123'
                  difficulty: 'medium'
                  topics: ['graphs']
                  exclude_ids: ['two-sum']
      responses:
        '200':
          description: Selected question
          headers:
            Cache-Control:
              schema:
                type: string
              description: no-store recommended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionRead'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: No eligible question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /topics:
    get:
      tags: [Read]
      summary: List topic tags (slug + color)
      description: Returns a paginated list of topic tags for UI rendering.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

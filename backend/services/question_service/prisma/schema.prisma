generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model question_topics {
  question_id String
  topic_slug  String
  questions   questions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  topics      topics    @relation(fields: [topic_slug], references: [slug], onDelete: Cascade, onUpdate: NoAction)

  @@id([question_id, topic_slug])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model question_versions {
  id           String
  version      Int
  title        String
  body_md      String
  difficulty   String
  topics       Json      @default("[]")
  attachments  Json      @default("[]")
  status       String
  published_at DateTime? @db.Timestamptz(6)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@id([id, version])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model questions {
  id              String                   @id
  title           String
  body_md         String
  difficulty      String
  topics          Json                     @default("[]")
  attachments     Json                     @default("[]")
  status          String
  version         Int                      @default(1)
  rand_key        Float                    @default(dbgenerated("random()"))
  created_at      DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?                @default(now()) @db.Timestamptz(6)
  tsv_en          Unsupported("tsvector")? @default(dbgenerated("to_tsvector('english'::regconfig, ((COALESCE(title, ''::text) || ' '::text) || COALESCE(body_md, ''::text)))"))
  question_topics question_topics[]
  reservations    reservations[]

  @@index([rand_key], map: "idx_questions_rand_key")
  @@index([status, difficulty, updated_at(sort: Desc)], map: "idx_questions_status_diff_updated_desc")
  @@index([topics(ops: JsonbPathOps)], map: "idx_questions_topics_gin", type: Gin)
}

model topics {
  slug            String            @id
  display         String
  color_hex       String
  question_topics question_topics[]

  @@index([color_hex], map: "idx_topics_color")
}

model reservations {
  matching_id String    @id
  question_id String
  expires_at  DateTime  @db.Timestamptz(6)
  questions   questions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
